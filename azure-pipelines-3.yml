trigger:
  branches:
    include:
      - master
  paths:
    include:
      - log-message-processor/**

pool:
  vmImage: ubuntu-latest

variables:
  - group: variable-group-taller

stages:
  - stage: Build_and_Test
    jobs:
      - job: InstallDeps
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8'
              architecture: 'x64'
            displayName: 'Install Python 3.8'

          - script: |
              cd log-message-processor
              python -m pip install --upgrade pip setuptools wheel
              pip install -r requirements.txt
            displayName: 'Install Python dependencies'

          - script: |
              cd log-message-processor
              sudo apt-get update
              sudo apt-get install -y build-essential tcl
              wget https://download.redis.io/releases/redis-7.0.0.tar.gz
              tar xzf redis-7.0.0.tar.gz
              cd redis-7.0.0
              make -j$(nproc)
              sudo make install
              sudo redis-server --daemonize yes
              redis-cli ping
            displayName: 'Install Redis 7.0'
            condition: and(succeeded(), eq(variables['REDIS_HOST'], '127.0.0.1'))
            env:
              REDIS_HOST: $(REDIS_HOST)
              REDIS_PORT: $(REDIS_PORT)
              REDIS_CHANNEL: $(REDIS_CHANNEL)

  - stage: Deploy_to_VM
    dependsOn: Build_and_Test
    condition: succeeded()
    jobs:
      - job: Deploy
        steps:
          - task: AzureCLI@2
            name: GetPublicIP
            inputs:
              azureSubscription: 'Azure for Students(bfc3d097-7e73-40b8-aa34-e70b307c0867)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                PUBLIC_IP=$(az vm show \
                  --name "$(VM_NAME)" \
                  --resource-group "$(RESOURCE_GROUP)" \
                  --show-details \
                  --query "publicIps" \
                  --output tsv)

                echo "##vso[task.setvariable variable=VM_PUBLIC_IP]$PUBLIC_IP"
                echo "IP pública obtenida: $PUBLIC_IP"
            displayName: 'Obtener IP pública de la VM'

          - script: |
              echo "Instalando sshpass..."
              sudo apt-get update && sudo apt-get install -y sshpass

              echo "Conectando por SSH..."
              sshpass -p $(VM_PASSWORD) ssh -o StrictHostKeyChecking=no $(VM_USERNAME)@$(VM_PUBLIC_IP) << 'EOSSH'
                echo "Entrando al repositorio..."
                cd /home/azureuser/tu-repo
                sudo git pull origin master

                echo "Deteniendo el servicio log-message-processor si ya existe..."
                sudo docker-compose -f Docker-compose.yml stop log-message-processor || true
                sudo docker-compose -f Docker-compose.yml rm -f log-message-processor || true

                echo "Reconstruyendo y levantando solo el servicio auth-api..."
                sudo docker-compose -f Docker-compose.yml build log-message-processor
                sudo docker-compose -f Docker-compose.yml up -d log-message-processor

                echo "log-message-processor desplegado correctamente en la VM usando docker-compose."
              EOSSH
            displayName: 'SSH para desplegar log-message-processor con docker-compose'
