trigger:
  branches:
    include:
      - master
  paths:
    include:
      - log-message-processor/**

pool:
  vmImage: ubuntu-latest

variables:
  REDIS_HOST: 127.0.0.1
  REDIS_PORT: 6379
  REDIS_CHANNEL: log_channel
  VM_USERNAME: azureuser
  VM_PASSWORD: SuperSecret123!  # üîê reemplaza con la real
  VM_NAME: vm-taller
  RESOURCE_GROUP: my-first-terraform-RG

stages:
  - stage: Build_and_Test
    jobs:
      - job: InstallDeps
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8'
              architecture: 'x64'
            displayName: 'Install Python 3.8'

          - script: |
              cd log-message-processor
              python -m pip install --upgrade pip setuptools wheel
              pip install -r requirements.txt
            displayName: 'Install Python dependencies'

          - script: |
              cd log-message-processor
              sudo apt-get update
              sudo apt-get install -y build-essential tcl
              wget https://download.redis.io/releases/redis-7.0.0.tar.gz
              tar xzf redis-7.0.0.tar.gz
              cd redis-7.0.0
              make -j$(nproc)
              sudo make install
              sudo redis-server --daemonize yes
              redis-cli ping
            displayName: 'Install Redis 7.0'
            condition: and(succeeded(), eq(variables['REDIS_HOST'], '127.0.0.1'))
            env:
              REDIS_HOST: $(REDIS_HOST)
              REDIS_PORT: $(REDIS_PORT)
              REDIS_CHANNEL: $(REDIS_CHANNEL)

  - stage: Deploy_to_VM
    dependsOn: Build_and_Test
    condition: succeeded()
    jobs:
      - job: Deploy
        steps:
          - task: AzureCLI@2
            name: GetPublicIP
            inputs:
              azureSubscription: 'Azure for Students(bfc3d097-7e73-40b8-aa34-e70b307c0867)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                PUBLIC_IP=$(az vm show \
                  --name "$(VM_NAME)" \
                  --resource-group "$(RESOURCE_GROUP)" \
                  --show-details \
                  --query "publicIps" \
                  --output tsv)

                echo "##vso[task.setvariable variable=VM_PUBLIC_IP]$PUBLIC_IP"
                echo "IP p√∫blica obtenida: $PUBLIC_IP"
            displayName: 'Obtener IP p√∫blica de la VM'

          - script: |
              echo "Instalando sshpass..."
              sudo apt-get update && sudo apt-get install -y sshpass

              echo "Conectando por SSH con usuario y contrase√±a..."
              sshpass -p "$(VM_PASSWORD)" ssh -o StrictHostKeyChecking=no $(VM_USERNAME)@$(VM_PUBLIC_IP) << 'EOSSH'
                echo " Entrando al microservicio log-message-processor..."
                cd /home/azureuser/tu-repo/log-message-processor
                sudo git pull origin master

                echo "üßπ Eliminando contenedor si ya existe..."
                sudo docker rm -f log-message-processor || true

                echo " Construyendo imagen desde el Dockerfile..."
                cd log-message-processor
                sudo docker build -t log-message-processor .

                echo "üöÄ Ejecutando contenedor en modo detached..."
                sudo docker run -d --restart unless-stopped \
                  --name log-message-processor \
                  --network tu-repo_app-network \
                  --tty \
                  --interactive \
                  -e REDIS_HOST=redis \
                  -e REDIS_PORT=6379 \
                  -e REDIS_CHANNEL=log_channel \
                  -e ZIPKIN_URL=http://zipkin:9411/api/v2/spans \
                  log-message-processor

                echo " Despliegue finalizado correctamente en la VM."
              EOSSH
            displayName: 'SSH con usuario y contrase√±a para desplegar log-message-processor'
