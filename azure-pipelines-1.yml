trigger:
  branches:
    include:
      - master
  paths:
    include:
      - users-api/**

pool:
  vmImage: ubuntu-latest

variables:
  - group: variable-group-taller

stages:
  - stage: Build
    jobs:
      - job: BuildWithMaven
        steps:
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '8'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'

          - script: |
              echo "Java version:"
              java -version
              echo "Changing directory to users-api"
              cd users-api
            displayName: 'Verificar versión de Java y cambiar de carpeta'

          - task: Maven@3
            inputs:
              mavenPomFile: 'users-api/pom.xml'
              mavenOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              goals: 'package'

  - stage: Deploy_to_VM
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: Deploy
        steps:
          - task: AzureCLI@2
            name: GetPublicIP
            inputs:
              azureSubscription: $(AZURE_ACCOUNT)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                PUBLIC_IP=$(az vm show \
                  --name "$(VM_NAME)" \
                  --resource-group "$(RESOURCE_GROUP)" \
                  --show-details \
                  --query "publicIps" \
                  --output tsv)

                echo "##vso[task.setvariable variable=VM_PUBLIC_IP]$PUBLIC_IP"
                echo "IP pública obtenida: $PUBLIC_IP"
            displayName: 'Obtener IP pública de la VM'

          - script: |
              echo "Instalando sshpass..."
              sudo apt-get update && sudo apt-get install -y sshpass

              echo "Conectando por SSH con usuario y contraseña..."
              sshpass -p $(VM_PASSWORD) ssh -o StrictHostKeyChecking=no $(VM_USERNAME)@$(VM_PUBLIC_IP) << 'EOSSH'
                echo "Entrando al repositorio..."
                cd /home/azureuser/tu-repo
                sudo git pull origin master

                echo "Deteniendo el servicio users-api si ya existe..."
                sudo docker-compose -f Docker-compose.yml stop users-api || true
                sudo docker-compose -f Docker-compose.yml rm -f users-api || true

                echo "Reconstruyendo y levantando solo el servicio users-api..."
                sudo docker-compose -f Docker-compose.yml build --no-cache users-api
                sudo docker-compose -f Docker-compose.yml up -d users-api

                echo "Users-API desplegado correctamente en la VM usando docker-compose."
              EOSSH
            displayName: 'SSH para desplegar users-api con docker-compose'