trigger:
  branches:
    include:
      - master
  paths:
    include:
      - users-api/**

pool:
  vmImage: ubuntu-latest

variables:
  VM_USERNAME: azureuser
  VM_PASSWORD: SuperSecret123!  # ‚ö†Ô∏è Reempl√°zalo con la real
  VM_NAME: vm-taller
  RESOURCE_GROUP: my-first-terraform-RG

stages:
  - stage: Build
    jobs:
      - job: BuildWithMaven
        steps:
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '8'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'

          - script: |
              echo "Java version:"
              java -version
              echo "Changing directory to users-api"
              cd users-api
            displayName: 'Verificar versi√≥n de Java y cambiar de carpeta'

          - task: Maven@3
            inputs:
              mavenPomFile: 'users-api/pom.xml'
              mavenOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              goals: 'package'

  - stage: Deploy_to_VM
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: Deploy
        steps:
          - task: AzureCLI@2
            name: GetPublicIP
            inputs:
              azureSubscription: 'Azure for Students(bfc3d097-7e73-40b8-aa34-e70b307c0867)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                PUBLIC_IP=$(az vm show \
                  --name "$(VM_NAME)" \
                  --resource-group "$(RESOURCE_GROUP)" \
                  --show-details \
                  --query "publicIps" \
                  --output tsv)

                echo "##vso[task.setvariable variable=VM_PUBLIC_IP]$PUBLIC_IP"
                echo "IP p√∫blica obtenida: $PUBLIC_IP"
            displayName: 'Obtener IP p√∫blica de la VM'

          - script: |
              echo "Instalando sshpass..."
              sudo apt-get update && sudo apt-get install -y sshpass

              echo "Conectando por SSH con usuario y contrase√±a..."
              sshpass -p "$(VM_PASSWORD)" ssh -o StrictHostKeyChecking=no $(VM_USERNAME)@$(VM_PUBLIC_IP) << 'EOSSH'
                echo "üì¶ Entrando a users-api..."
                cd /home/azureuser/tu-repo/users-api
                sudo git pull origin master

                echo "üßº Deteniendo y eliminando contenedor existente..."
                sudo docker rm -f users-api || true

                echo "üê≥ Construyendo imagen..."
                sudo docker build -t users-api .

                echo "üöÄ Ejecutando contenedor..."
                sudo docker run -d --restart unless-stopped \
                  --name users-api \
                  --network tu-repo_app-network \
                  -p 8083:8083 \
                  -e SERVER_PORT=8083 \
                  -e JWT_SECRET=PRFT \
                  users-api

                echo "‚úÖ Despliegue completado para users-api"
              EOSSH
            displayName: 'SSH para desplegar users-api en la VM'
