trigger:
  branches:
    include:
      - master
  paths:
    include:
      - auth-api/**

pool:
  vmImage: ubuntu-latest

variables:
  - group: variable-group-taller

stages:
  - stage: Build
    jobs:
      - job: BuildAuthAPI
        steps:
          - task: GoTool@0
            inputs:
              version: '1.18.2'
            displayName: 'Install Go $(GO_VERSION)'

          - script: |
              mkdir -p '$(system.defaultWorkingDirectory)/bin'
              echo '##vso[task.prependpath]$(GOBIN)'
            displayName: 'Set up the Go workspace'

          - script: |
              ls -la $(system.defaultWorkingDirectory)
            displayName: 'List files in the working directory'

          - script: |
              go version
              cd auth-api || exit 1
              if [ ! -f go.mod ]; then
                  go mod init github.com/Salazq/microservice-app-example/tree/master/auth-api
              fi
              go mod tidy
              go mod download
              go build -v .
            workingDirectory: '$(system.defaultWorkingDirectory)'
            displayName: 'Build the auth-api service'

  - stage: Deploy
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DeployToVM
        steps:
          - task: AzureCLI@2
            name: GetPublicIP
            inputs:
              azureSubscription: $(AZURE_ACCOUNT)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                PUBLIC_IP=$(az vm show \
                  --name "$(VM_NAME)" \
                  --resource-group "$(RESOURCE_GROUP)" \
                  --show-details \
                  --query "publicIps" \
                  --output tsv)

                echo "##vso[task.setvariable variable=VM_PUBLIC_IP]$PUBLIC_IP"
                echo "IP pública obtenida: $PUBLIC_IP"
            displayName: 'Obtener IP pública de la VM'

          - script: |
              echo "Instalando sshpass..."
              sudo apt-get update && sudo apt-get install -y sshpass

              echo "Conectando por SSH..."
              sshpass -p $(VM_PASSWORD) ssh -o StrictHostKeyChecking=no $(VM_USERNAME)@$(VM_PUBLIC_IP) << 'EOSSH'
                echo "Entrando al repositorio..."
                cd /home/azureuser/tu-repo
                sudo git pull origin master

                echo "Deteniendo el servicio auth-api si ya existe..."
                sudo docker-compose -f Docker-compose.yml stop auth-api || true
                sudo docker-compose -f Docker-compose.yml rm -f auth-api || true

                echo "Reconstruyendo y levantando solo el servicio auth-api..."
                sudo docker-compose -f Docker-compose.yml build auth-api
                sudo docker-compose -f Docker-compose.yml up -d auth-api

                echo " Auth-API desplegado correctamente en la VM usando docker-compose."
              EOSSH
            displayName: 'SSH para desplegar auth-api con docker-compose'